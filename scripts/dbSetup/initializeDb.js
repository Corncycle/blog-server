require('dotenv').config()

const knex = require('knex')({
  client: 'pg',
  connection: process.env.DATABASE_CONNECTION_STRING,
  pool: {
    min: 0,
    max: process.env.ENVIRONMENT === 'development' ? 1 : 2,
  },
})

const DROP_TABLES_FIRST = true

// schemas for tables
//
// post
// =====================
// id - number (autogenerated, increasing, unique)
// slug - string (calculated based on title, unique)
// title_html - string (title, after markdown parsing)
// title_md - string (title, before markdown parsing)
// blurb_html - string (blurb, after markdown parsing)
// blurb_md - string (blurb, before markdown parsing. either defined explicitly, or based on position of first special character in body to autogenerate)
// body_html - string (body, after markdown parsing)
// body_md - string (body, before markdown parsing)
// created_at - date
// last_edited_at - date
//
// comment
// =====================
// id - number (autogenerated, increasing)
// post_slug - string (link to post)
// display_name - string (given name from google jwt)
// email - string (not used now, but to verify with jwt for edits/deletes later)
// picture - string (url from google jwt)
// body - string (make sure to sanitize / escape this)
// created_at - date

const initializePostTableIfNotInitialized = async () => {
  if (DROP_TABLES_FIRST) {
    await knex.schema.dropTable('post')
  }

  let hasTable = await knex.schema.hasTable('post')
  if (hasTable) {
    console.log('Already have `post` table, skipping creating it...')
  } else {
    console.log('Creating `post` table...')
    await knex.schema.createTable('post', (table) => {
      table.increments('id').notNullable().unique()
      table.text('slug').notNullable().unique()
      table.text('title_html').notNullable()
      table.text('title_md').notNullable()
      table.text('blurb_html').notNullable()
      table.text('blurb_md').notNullable()
      table.text('body_html').notNullable()
      table.text('body_md').notNullable()
      table.date('created_at').notNullable()
      table.date('edited_at')
    })

    hasTable = await knex.schema.hasTable('post')
    if (!hasTable) {
      console.log('Failed to create `post` table :(')
    } else {
      console.log('Successfully created `post` table')
    }
  }
}

const initializeCommentTableIfNotInitialized = async () => {
  if (DROP_TABLES_FIRST) {
    await knex.schema.dropTable('comment')
  }

  let hasTable = await knex.schema.hasTable('comment')
  if (hasTable) {
    console.log('Already have `comment` table, skipping creating it...')
  } else {
    console.log('Creating `comment` table...')
    await knex.schema.createTable('comment', (table) => {
      table.increments('id').notNullable().unique()
      table.text('post_slug').notNullable()
      table.text('display_name').notNullable()
      table.text('email')
      table.text('picture').notNullable()
      table.text('body').notNullable()
      table.date('created_at').notNullable()
    })

    hasTable = await knex.schema.hasTable('comment')
    if (!hasTable) {
      console.log('Failed to create `comment` table :(')
    } else {
      console.log('Successfully created `comment` table')
    }
  }
}

;(async () => {
  await initializeCommentTableIfNotInitialized()
  await initializePostTableIfNotInitialized()
})()
